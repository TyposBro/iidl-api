# {PATH_TO_THE_PROJECT}/.github/workflows/action.yaml
name: Docker Image CI and Deploy
description: Build, push Docker images and deploy to Kubernetes

on:
  push:
    branches: ["master"]
  # Optional: Add pull_request trigger if needed for testing builds
  # pull_request:
  #   branches: ["master"]

jobs:
  build_and_deploy: # Changed job name for clarity
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out code
      - uses: actions/checkout@v3

      # Step 2: Log in to registry
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: unist.krs.ncr.gov-ntruss.com
          username: ${{ secrets.REG_ACCESS_KEY }}
          password: ${{ secrets.REG_SECRET_KEY }}

      # Step 3: Build and push API image (Ensure IMAGE_TAG logic is correct for updates)
      - name: Docker Build and push API Image
        id: build-api # Add an ID to potentially reference tags later
        env:
          REG: unist.krs.ncr.gov-ntruss.com
          API_NAME: unist-iidl-api
          # Consider using dynamic tags like git sha: ${{ github.sha }}
          API_VERSION: 1.0.0 # Or use github.sha for unique tags
        run: |
          IMAGE_TAG=$REG/$API_NAME:$API_VERSION # Or use $REG/$API_NAME:${{ github.sha }}
          docker build -t $API_NAME -f api/Dockerfile ./api
          docker tag $API_NAME:latest $IMAGE_TAG
          docker push $IMAGE_TAG
          echo "api_image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT # Output tag if needed later

      # Step 4: Build and push Frontend image (Ensure IMAGE_TAG logic is correct)
      - name: Docker Build and push Frontend Image
        id: build-frontend
        env:
          REG: unist.krs.ncr.gov-ntruss.com
          FRONTEND_NAME: unist-iidl-frontend
          # Use consistent tagging strategy with API
          FRONTEND_VERSION: 1.0.0 # Or use github.sha
        run: |
          IMAGE_TAG=$REG/$FRONTEND_NAME:$FRONTEND_VERSION # Or use $REG/$FRONTEND_NAME:${{ github.sha }}
          echo "Building Frontend Image..."
          docker build -t $FRONTEND_NAME -f frontend/Dockerfile ./frontend
          echo "Tagging Frontend Image..."
          docker tag $FRONTEND_NAME:latest $IMAGE_TAG
          echo "Pushing Frontend Image..."
          docker push $IMAGE_TAG
          echo "frontend_image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
